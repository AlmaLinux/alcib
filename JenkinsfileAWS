def performCreateStages(String arch) {
    return {
        sh "python3 -u main.py --stage init --hypervisor KVM --arch ${arch}"
    }
}

def performDestroyStages(String arch, String version) {
    return {
        script {
            if (arch == 'x86_64' && version == '8') {
                sh "python3 -u main.py --stage destroy --hypervisor AWS-STAGE-2  --arch ${arch}"
            } 
        }      
        sh "python3 -u main.py --stage destroy --hypervisor KVM --arch ${arch}"
    }
}

def performTestStages(String arch) {
    return {
        sh "python3 -u main.py --stage test --hypervisor KVM --arch ${arch}"
    }
}

def performBuildStages(String arch) {
    return {
            sh "python3 -u main.py --stage build --hypervisor KVM --arch ${arch}"
    }
}

def performPublishStages(String arch) {
    return {
            sh "python3 -u main.py --stage release --hypervisor KVM --arch ${arch}"
    }
}

pipeline {
  agent any
  parameters {
      choice(name: 'OS_MAJOR_VER', choices: ['8', '9'], description: 'AlmaLinux Major Version')
      choice(name: 'IMAGE', choices: ['AWS AMI', 'Vagrant Box', 'GenericCloud', 'OpenNebula'], description: 'Cloud image to update: build, test, release')
      extendedChoice(defaultValue: 'x86_64', description: 'Architecture to build', descriptionPropertyValue: '', multiSelectDelimiter: ',', name: 'ARCH', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_MULTI_SELECT', value: 'x86_64, aarch64', visibleItemCount: 2)
      string(name: 'BUCKET', defaultValue: 'alcib', description: 'S3 BUCKET NAME')
      booleanParam(defaultValue: true, description: 'Destroy AWS instance', name: 'DESTROY')
  }
  environment {
      AWS_ACCESS_KEY_ID = credentials('jenkins-aws-access-key-id')
      AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
      SSH_KEY_FILE = credentials('jenkins-aclib-ssh-private-key')
      GITHUB_TOKEN = credentials('github_token')
      OS_MAJOR_VER = "${params.OS_MAJOR_VER}"
  }
  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  stages {
    stage('Prepare Workspace') {
        steps {
            // Clean before build
            cleanWs()
            // We need to explicitly checkout from SCM here
            checkout scm
            echo "Building ${env.JOB_NAME}..."
        }
    }    
      stage('Create AWS instance for AWS AMI') {
          steps {
              script {
                  def jobs = [:]
                  for (arch in params.ARCH.replace('"', '').split(',')) {
                      jobs[arch] = performCreateStages(arch)
                  }
                  parallel jobs
              }
          }
      }
      stage('Build AWS AMI') {
        stages {
            stage('Build stage 1') {
                steps {
                      script {
                          def jobs = [:]
                          for (arch in params.ARCH.replace('"', '').split(',')) {
                              jobs[arch] = performBuildStages(arch)
                          }
                          parallel jobs
                      }
                  }
            }
            stage('Build AWS AMI stage 2') {
                when {
                    expression { params.OS_MAJOR_VER == '8' } 
                }
                steps {
                    script {
                        for (arch in params.ARCH.replace('"', '').split(',')) {
                            if (arch == 'x86_64') {
                                sh "python3 -u main.py --stage build --hypervisor AWS-STAGE-2 --arch ${arch}"
                            }
                        }

                    }
                }
            }
        }
      }
      stage('Test AWS AMI') {
          steps {
              script {
                  def jobs = [:]
                  for (arch in params.ARCH.replace('"', '').split(',')) {
                      jobs[arch] = performTestStages(arch)
                  }
                  parallel jobs
              }
          }
          post {
              success {
                  slackSend channel: '#albs-jenkins-action-required',
                    color: 'good',
                    message: "The build for Almalinux ${OS_MAJOR_VER}, job ${currentBuild.fullDisplayName} ready to be released as new AWS AMIs, please, approve: ${currentBuild.absoluteUrl}"
              }
          }
      }
      stage('User Input, Release Yes/No') {
          when {
              expression { params.DESTROY == true }
          }
        steps {
            script {
                // Preset to no, in case of timeout or user abort
                env.RELEASE_BUILD = 'no'                    
            }
            // Wrap only user input in timeout block and with-in catch block.
            // Rest of the action occurs after it based on env variable
            // On Abort, env varible not set, returns null 
            // Above ENV preset is safety-net to get 'no', in case of timeout/abort exception
            timeout(time:10, unit:'MINUTES') {
              script {
                catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') {
                  def userInput = input(
                    id: 'userInput',
                    message: 'AMI Image build completed. Make a release of this build?', ok: 'Process',
                    parameters: [choice(name: 'RELEASE_BUILD', choices: 'no\nyes')]
                    )
                  env.RELEASE_BUILD = userInput
                }
              }
            }
          }
      }
      stage('Publish New AMIs Release') {
        when {
            expression { env.RELEASE_BUILD == 'yes' }
        }
        steps {
            script {  
                def jobs = [:]
                for (arch in params.ARCH.replace('"', '').split(',')) {
                    jobs[arch] = performPublishStages(arch)
                }
                parallel jobs
// Publish only when released? replace  git repo to autobot?                      
                def arches = params.ARCH.replace('"', '').split(',')
                if (arches.length == 2) {
                    sh('git clone https://github.com/AlmaLinux/wiki.git')
                    sh('paste -d \\\\n aws_amis-x86_64.csv aws_amis-aarch64.csv > wiki/docs/.vuepress/public/ci-data/aws_amis.csv')
                    sh('paste -d \\\\n AWS_AMIS-x86_64.md AWS_AMIS-aarch64.md > wiki/docs/cloud/AWS_AMIS.md')
                    sh('python3 -u main.py --stage pullrequest')
                }
            }
          }
      }
      stage('Destroy AWS instance') {
          when {
              expression { params.DESTROY == true }
          }
          steps {
              script {
                  def jobs = [:]
                  for (arch in params.ARCH.replace('"', '').split(',')) {
                      jobs[arch] = performDestroyStages(arch,params.OS_MAJOR_VER)
                  }
                  parallel jobs
              }
          }
      }
  }

  post {
      always {
          archiveArtifacts artifacts: '*.log, *.md, *.csv, wiki/*.csv, wiki/*.md'
      }
      success {
          slackSend channel: '#albs-jenkins-notifications',
                    color: 'good',
                    message: "The build ${currentBuild.fullDisplayName} completed successfully : ${currentBuild.absoluteUrl}"
      }
      failure {
          slackSend channel: '#albs-jenkins-action-required',
                    color: 'danger',
                    message: "The build ${currentBuild.fullDisplayName} failed : ${currentBuild.absoluteUrl}"
          script {
              if (params.DESTROY == true) {
                  def jobs = [:]
                  for (arch in params.ARCH.replace('"', '').split(',')) {
                      jobs[arch] = performDestroyStages(arch,params.OS_MAJOR_VER)
                  }
                  parallel jobs
              }
          }
      }
      aborted {
          slackSend channel: '#albs-jenkins-action-required',
                    color: 'warning',
                    message: "The build ${currentBuild.fullDisplayName} was aborted : ${currentBuild.absoluteUrl}"
          script {
              if (params.DESTROY == true) {
                  def jobs = [:]
                  for (arch in params.ARCH.replace('"', '').split(',')) {
                      jobs[arch] = performDestroyStages(arch,params.OS_MAJOR_VER)
                  }
                  parallel jobs
              }
          }
      }
  }
}
