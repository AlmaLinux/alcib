def performCreateStages(String hypervisor) {
    return {
        sh "python3 -u main.py --stage init --hypervisor ${hypervisor}"
    }
}

def performBuildStages(String hypervisor) {
    return {
        sh "python3 -u main.py --stage build --hypervisor ${hypervisor}"
    }
}

def performTestStages(String hypervisor) {
    return {
        sh "python3 -u main.py --stage test --hypervisor ${hypervisor}"
    }
}

def performReleaseStages(String hypervisor) {
    return {
        sh "python3 -u main.py --stage release --hypervisor ${hypervisor}"
    }
}

def performDestroyStages(String hypervisor) {
    return {
        sh "python3 -u main.py --stage destroy --hypervisor ${hypervisor}"
    }
}

pipeline {
  agent any
  parameters {
      choice(name: 'OS_MAJOR_VER', choices: ['8', '9'], description: 'AlmaLinux Major Version')
      choice(name: 'IMAGE', choices: ['Vagrant Box', 'AWS AMI', 'GenericCloud', 'OpenNebula'], description: 'Cloud image to update: build, test, release')
      extendedChoice(defaultValue: 'VirtualBox', description: 'Hypervisors options to  build Vagrant Box', descriptionPropertyValue: '', multiSelectDelimiter: ',', name: 'HYPERVISORS', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_MULTI_SELECT', value: 'VirtualBox, VMWare_Desktop, KVM, HyperV', visibleItemCount: 4)
      string(name: 'BUCKET', defaultValue: 'alcib', description: 'S3 BUCKET NAME')
      string(name: 'VAGRANT', defaultValue: 'almalinux/8', description: 'Vagrant Cloud path to upload')
      booleanParam(defaultValue: true, description: 'Destroy AWS instance', name: 'DESTROY')
  }
  environment {
      AWS_ACCESS_KEY_ID = credentials('jenkins-aws-access-key-id')
      AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
      VAGRANT_CLOUD_ACCESS_KEY = credentials('jenkins-vagrant-user-access-key')
      SSH_KEY_FILE = credentials('jenkins-aclib-ssh-private-key')
      WINDOWS_CREDS = credentials('jenkins-windows-creds')
      OS_MAJOR_VER = "${params.OS_MAJOR_VER}"
  }

  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  stages {
    stage('Prepare Workspace') {
        steps {
            // Clean before build
            cleanWs()
            // We need to explicitly checkout from SCM here
            checkout scm
            echo "Building ${env.JOB_NAME}..."
        }
    } 
      stage('Create AWS instance for Vagrant') {
          steps {
              script {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performCreateStages(hv)
                  }
                  parallel jobs
              }
          }
      }
      stage('Build Vagrant Box') {
          steps {
              script {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performBuildStages(hv)
                  }
                  parallel jobs
              }
          }
      }
      stage('Test Vagrant Box') {
          steps {
              script {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performTestStages(hv)
                  }
                  parallel jobs
              }
          }
          post {
              success {
                  slackSend channel: '#albs-jenkins-action-required',
                            color: 'good',
                            message: "The build ${currentBuild.fullDisplayName} ready to be uploaded to Vagrant Cloud , please, approve: ${currentBuild.absoluteUrl}"
              }
          }
      }
      stage('User Input, Release Yes/No') {
        steps {
            script {
                // Preset to no, in case of timeout or user abort
                env.RELEASE_BUILD = 'no'
                env.DT_VERSION = sh(script: 'date -u +"%Y%m%d"', , returnStdout: true).trim()
                // Adding OS sub version, like 8.6 or 9.0 etc. + release date
                env.VERSION = (params.OS_MAJOR_VER == '8') ? "${params.OS_MAJOR_VER}.6.${env.DT_VERSION}" : "${params.OS_MAJOR_VER}.0.${env.DT_VERSION}"
                env.CHANGELOG = "AlmaLinux security upates."                                    
            }
            // Wrap only user input in timeout block and with-in catch block.
            // Rest of the action occurs after it based on env variable
            // On Abort, env varible not set, returns null 
            // Above ENV preset is safety-net to get 'no', in case of timeout/abort exception
            timeout(time:10, unit:'MINUTES') {
              script {
                catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') {
                    def userInput = input(
                    id: 'userInput',
                    message: 'Upload to Vagrant Cloud', ok: 'Starting uploading!',
                    parameters: [choice(name: 'RELEASE_BUILD', choices: 'no\nyes'),
                                    string(name: 'VERSION', description: 'Release version', defaultValue: "${env.VERSION}"),
                                    string(name: 'CHANGELOG', description: 'Vagrant box changelog', defaultValue: "${env.CHANGELOG}")]
                    )
                    env.RELEASE_BUILD = userInput['RELEASE_BUILD']
                    env.VERSION = userInput['VERSION']
                    env.CHANGELOG = userInput['CHANGELOG']
                }
                echo "Make Release: ${env.RELEASE_BUILD}"
                echo "Version: ${env.VERSION}"
                echo "Change Log: ${env.CHANGELOG}"                
              }
            }
          }
      }
      stage('Publish to Vagrant Cloud') {
        when {
            expression { env.RELEASE_BUILD == 'yes' }
        }      
        steps {
            script {
                def jobs = [:]
                for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                    jobs[hv] = performReleaseStages(hv)
                }
                parallel jobs

                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh('curl --header \"Authorization: Bearer $VAGRANT_CLOUD_ACCESS_KEY\" https://app.vagrantup.com/api/v1/box/$VAGRANT/version/$VERSION/release --request PUT')
                }
            }
        }
      }
      stage('Destroy AWS instance') {
          when {
              expression { params.DESTROY == true }
          }
          steps {
              script {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performDestroyStages(hv)
                  }
                  parallel jobs
              }
          }
      }
  }

  post {
      always {
          archiveArtifacts artifacts: '*.log'
      }
      success {
          slackSend channel: '#albs-jenkins-notifications',
                    color: 'good',
                    message: "The build ${currentBuild.fullDisplayName} completed successfully : ${currentBuild.absoluteUrl}"
      }
      failure {
          slackSend channel: '#albs-jenkins-action-required',
                    color: 'danger',
                    message: "The build ${currentBuild.fullDisplayName} failed : ${currentBuild.absoluteUrl}"
          script {
              if (params.DESTROY == true) {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performDestroyStages(hv)
                  }
                  parallel jobs
              }
          }
      }
      aborted {
          slackSend channel: '#albs-jenkins-action-required',
                    color: 'warning',
                    message: "The build ${currentBuild.fullDisplayName} was aborted : ${currentBuild.absoluteUrl}"
          script {
              if (params.DESTROY == true) {
                  def jobs = [:]
                  for (hv in params.HYPERVISORS.replace('"', '').split(',')) {
                      jobs[hv] = performDestroyStages(hv)
                  }
                  parallel jobs
              }
          }
      }
  }
}
