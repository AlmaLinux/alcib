properties([disableConcurrentBuilds(), disableResume(), parameters([booleanParam(defaultValue: false, description: 'Do not fail when production branchh exists', name: 'NO_FAIL'),[name: 'AL8OPTION', $class: 'ChoiceParameter', choiceType: 'PT_RADIO', description: 'Select Almalinux 8 branch option to publish', filterLength: 1, filterable: false, randomName: 'choice-parameter-230686960675855', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''def getOpts() {
  def result = ["No Changes:selected", "Use Development"]
} 
def res = getOpts()

return res
''']]], [name: 'AL8BRANCH', $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'AlmaLinux 8 branch to publish', filterLength: 1, filterable: true, randomName: 'choice-parameter-230686968657517', referencedParameters: 'AL8OPTION', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''def getDockerHubLibraryPrefix(String osVersion="8", String gitRepoPath="docker-library/official-images/master") {
  def response = new URL("https://raw.githubusercontent.com/${gitRepoPath}/library/almalinux").text 
  //println("Status: "+ response)   // dump for debug
  def pre="al${osVersion}"
  def branch=""
  for(i in response.tokenize()){
    if (i != null && i.endsWith("amd64") && i.contains(pre) && i.length() > 23) {
    // let value overwrite to get last value
      branch = i.substring(11,23)
    } 
  }
  return branch
}
def getDevRepoBranches(String prodPreFix="al8-20220901", String gitOwner="almalinuxautobot", String gitRepo="docker-images"){
  def regions = "git ls-remote -h https://github.com/${gitOwner}/${gitRepo}.git"
  def region = regions.execute() 
  region.waitFor()
  def output = region.in.text
  def exitcode= region.exitValue()
  def error = region.err.text
  def branch=[]

  if (error) {
    println "Std Err: ${error}"
    println "Process exit code: ${exitcode}"
    branch.add("${exitcode}: ${error}")
    return branch
  }

  def pre = prodPreFix.substring(0,3)
  for(i in output.tokenize()){
    if (i.contains(pre) && i.substring(11) > prodPreFix && !i.contains("template")) {
      branch.add(i.substring(11))
    } 
  }
  return branch
}
def getBranch(optVal) {
  if (optVal == "No Changes") {
    def var0 = [getDockerHubLibraryPrefix()]
    return var0
  } else {
    def var1 = getDevRepoBranches()
    return var1
  }
}
def var2 = getBranch(AL8OPTION)

return var2
''']]], [name: 'AL9OPTION', $class: 'ChoiceParameter', choiceType: 'PT_RADIO', description: 'Select Almalinux 9 branch option to publish', filterLength: 1, filterable: false, randomName: 'choice-parameter-230686972751396', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''def getOpts() {
  def result = ["No Changes:selected", "Use Development"]
} 
def res = getOpts()

return res
''']]], [name: 'AL9BRANCH', $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: 'AlmaLinux 9 branch to publish', filterLength: 1, filterable: true, randomName: 'choice-parameter-230686979823352', referencedParameters: 'AL9OPTION', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''def getDockerHubLibraryPrefix(String osVersion="8", String gitRepoPath="docker-library/official-images/master") {
  def response = new URL("https://raw.githubusercontent.com/${gitRepoPath}/library/almalinux").text 
  //println("Status: "+ response)   // dump for debug
  def pre="al${osVersion}"
  def branch=""
  for(i in response.tokenize()){
    if (i != null && i.endsWith("amd64") && i.contains(pre) && i.length() > 23) {
    // let value overwrite to get last value
      branch = i.substring(11,23)
    } 
  }
  return branch
}
def getDevRepoBranches(String prodPreFix="al8-20220901", String gitOwner="almalinuxautobot", String gitRepo="docker-images"){
  def regions = "git ls-remote -h https://github.com/${gitOwner}/${gitRepo}.git"
  def region = regions.execute() 
  region.waitFor()
  def output = region.in.text
  def exitcode= region.exitValue()
  def error = region.err.text
  def branch=[]

  if (error) {
    println "Std Err: ${error}"
    println "Process exit code: ${exitcode}"
    branch.add("${exitcode}: ${error}")
    return branch
  }

  def pre = prodPreFix.substring(0,3)
  for(i in output.tokenize()){
    if (i.contains(pre) && i.substring(11) > prodPreFix && !i.contains("template")) {
      branch.add(i.substring(11))
    } 
  }
  return branch
}
def getBranch(String optVal, String dtprod) {
  if (optVal == "No Changes") {
    def var0 = [dtprod]
    return var0
  } else {
    def var1 = getDevRepoBranches(dtprod)
    return var1
  }
}
def dtprod=getDockerHubLibraryPrefix("9")
def var2 = getBranch(AL9OPTION, dtprod)

return var2
''']]], [name: 'BRANCHLOG', $class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: 'Branch Log', omitValueField: false, randomName: 'choice-parameter-230686986276185', referencedParameters: 'AL8OPTION,AL8BRANCH,AL9OPTION,AL9BRANCH', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], script: [classpath: [], oldScript: '', sandbox: false, script: '''def AL8DESC=""
if (AL8OPTION == "No Changes") {
  AL8DESC = "No Changes. Using existing production branches <b>${AL8BRANCH}-amd64, ${AL8BRANCH}-arm64, ${AL8BRANCH}-ppc64le, and ${AL8BRANCH}-s390x</b>"
} else {
  def AL8PRE = AL8BRANCH.substring(0,12)
  AL8DESC = "New set of production branches <b>${AL8PRE}-amd64, ${AL8PRE}-arm64, ${AL8PRE}-ppc64le, and ${AL8PRE}-s390x</b> will be generated based on source branch <b><a href=https://github.com/almalinuxautobot/docker-images/tree/${AL8BRANCH}>${AL8BRANCH}</a></b>."
}
def AL9DESC=""
if (AL9OPTION == "No Changes") {
  AL9DESC = "No Changes. Using existing production branches <b>${AL9BRANCH}-amd64, ${AL9BRANCH}-arm64, ${AL9BRANCH}-ppc64le, and ${AL9BRANCH}-s390x</b>"
} else {
  def AL9PRE = AL9BRANCH.substring(0,12)
  AL9DESC = "New set of production branches <b>${AL9PRE}-amd64, ${AL9PRE}-arm64, ${AL9PRE}-ppc64le, and ${AL9PRE}-s390x</b> will be generated based on source branch <b><a href=https://github.com/almalinuxautobot/docker-images/tree/${AL9BRANCH}>${AL9BRANCH}</a></b>. "
}
def html ="""<p>
<li>${AL8DESC}</li>
<li>${AL9DESC}</li>
</p>
"""

return html
''']]], text(name: 'COMMIT_NOTES', defaultValue: 'This is auto-generated commit, any concern or issue, please contact @srbala or email to AlmaLinux OS Foundation <cloud-infra@almalinux.org> (@AlmaLinux)', description: 'Commit log prefix')])])

pipeline {
    environment {
        AL8BRANCH = "${params.AL8BRANCH}"
        AL9BRANCH = "${params.AL9BRANCH}"
        AL8OPTION = "${params.AL8OPTION}"
        AL9OPTION = "${params.AL9OPTION}"
        NO_FAIL = "${params.NO_FAIL}"
        FAIL_WHEN_BRANCH_EXITS = "${params.NO_FAIL}"
        DT_TAG = sh(script: 'date -u +"%Y%m%d_%H%M%S"', , returnStdout: true).trim()
        JDT = sh(script: 'date -u +"%H%M%S"', , returnStdout: true).trim()
        JOB_DATE = sh(script: 'date -u +"%Y%m%d"', , returnStdout: true).trim()
        WS_PWD = sh(script: 'pwd', , returnStdout: true).trim()
        AL8DATE = sh(script: 'echo ${AL8BRANCH:4:8}', , returnStdout: true).trim()
        AL9DATE = sh(script: 'echo ${AL9BRANCH:4:8}', , returnStdout: true).trim()
    } 
    agent {
      label 'ec2-al8-x86_64'
    }

    stages {
        stage('Prepare WS') {
          steps {
            echo "Workspace cleanup ..."
            cleanWs()
            sh '''
            echo "FAIL_WHEN_BRANCH_EXITS: ${NO_FAIL}"
            git clone --single-branch --depth=1 --branch=main https://github.com/AlmaLinux/docker-images.git $WS_PWD/dock-scripts
            cd $WS_PWD/dock-scripts
            touch changelog_al8.log changelog_al9.log prinfo.md
            ls -al
            '''
            echo 'Workspace ready to use ...'
          }
        }
        stage('Safety Checks') {
          when {
            allOf {
              expression { params.AL8OPTION == 'No Changes' }
              expression { params.AL9OPTION == 'No Changes' }
            }  
          }
          steps {
            echo "Selected both producion repository, nothing publish, job will terminate and exit"
            sh(script: 'false')
          }
        }
        stage('Setup Git') {
          when {
            anyOf {
              expression { params.AL8OPTION != 'No Changes' }
              expression { params.AL9OPTION != 'No Changes' }
            }  
          }
          steps {
            withCredentials([string(credentialsId: 'github-almalinuxautobot-name', variable: 'GIT_NAME'),string(credentialsId: 'github-almalinuxautobot-email', variable: 'GIT_EMAIL')]) {
              sh '''
              cd $WS_PWD/dock-scripts
              set +x
              git config user.name ${GIT_NAME}
              git config user.email ${GIT_EMAIL}
              '''
            }
          }
        }        
        stage('Parallel Steps') {
          parallel {
            stage('Alma 8') {
              stages {
                stage('AL8 Verify') {
                  // when {
                  //   expression { params.AL8OPTION != 'No Changes' }
                  // }
                  steps {
                    echo "Verify Release run"
                    sh '''
                    cd $WS_PWD/dock-scripts 
                    source ./docker_utils_functions
                    validateOrPrepareBranches "8" "${AL8DATE}" "${AL8BRANCH}" "${AL8OPTION}" "true" "${NO_FAIL}"
                    '''
                  }
                }
                stage('AL8 Test') {
                  when {
                    expression { params.AL8OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Testing images from ${AL8BRANCH} repo ..."
                    sh '''
                      cd $WS_PWD/dock-scripts 
                      source ./docker_utils_functions
                      rm -rf "work/test-al8"
                      git clone --single-branch --branch=${AL8BRANCH} https://github.com/almalinuxautobot/docker-images "$WS_PWD/dock-scripts/work/test-al8"
                      cd "$WS_PWD/dock-scripts/work/test-al8"                    
                      cat ./env.al8
                      source ./env.al8
                      cp ./env.al8 $WS_PWD/dock-scripts/env-al8.log
                      build_images "$al_os_version" "$al_rel_version" "x86_64" "$al_types" "$al_repo_prefix" "$al_date_suffix" "rootfs" "true"
                      cd ../..
                      docker run --rm -t \
                        -v $PWD:/code \
                        -v /var/run/docker.sock:/var/run/docker.sock:rw \
                        -e SYS_BASE=$SYS_BASE \
                        -e SYS_INIT=$SYS_INIT \
                        -e SYS_MICRO=$SYS_MICRO \
                        -e SYS_DEFAULT=$SYS_DEFAULT \
                        -e SYS_MINIMAL=$SYS_MINIMAL \
                        srbala/testinfra:docker pytest -p no:cacheprovider --verbose --junit-xml al8_junit.xml   
                      mv *.xml $WS_PWD/dock-scripts/work/                   
                      rm -rf "$WS_PWD/dock-scripts/work/test-al8"
                    '''
                    junit allowEmptyResults: true, skipPublishingChecks: true, testResults: '**/al8*.xml'
                    archiveArtifacts artifacts: "**/al8*.xml", fingerprint: true 
                  }
                }
                stage('AL8 Prepare') {
                  when {
                    expression { params.AL8OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Prepare Release ..."
                    withCredentials([usernamePassword(credentialsId: 'github-almalinuxautobot', passwordVariable: 'GIT_PWD', usernameVariable: 'GIT_UID')]) {
                      sh '''
                        cd $WS_PWD/dock-scripts 
                        source ./docker_utils_functions
                        validateOrPrepareBranches "8" "${AL8DATE}" "${AL8BRANCH}" "${AL8OPTION}" "false" "${NO_FAIL}" "${GIT_UID}" "${GIT_PWD}"
                      '''
                    }
                  }
                }
                stage('AL8 ChangeLog') {
                  when {
                    expression { params.AL8OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Generate change log ..."
                    sh '''
                      cd $WS_PWD/dock-scripts
                      source $WS_PWD/dock-scripts/env-al8.log
                      ./gen_changelog 8 $SYS_DEFAULT almalinux:8
                      ls -al
                      cat changelog_al8.log
                      rm __*.log
                    '''
                  }
                }                                          
              }
            }
            stage('Alma 9') {
              stages {
                stage('AL9 Verify') {
                  // when {
                  //   expression { params.AL9OPTION == 'No Changes' }
                  // }
                  steps {
                    echo "Verify Release ..."
                    sh '''
                    cd $WS_PWD/dock-scripts 
                    source ./docker_utils_functions
                    validateOrPrepareBranches "9" "${AL9DATE}" "${AL9BRANCH}" "${AL9OPTION}" "true" "${NO_FAIL}"
                    '''
                  }
                }
                stage('AL9 Test') {
                  when {
                    expression { params.AL9OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Testing images from ${AL9BRANCH} repo ..."
                    sh '''
                      cd $WS_PWD/dock-scripts 
                      source ./docker_utils_functions
                      rm -rf "work/test-al9"
                      git clone --single-branch --branch=${AL9BRANCH} https://github.com/almalinuxautobot/docker-images "$WS_PWD/dock-scripts/work/test-al9"
                      cd "$WS_PWD/dock-scripts/work/test-al9"                    
                      cat ./env.al9
                      source ./env.al9
                      cp ./env.al9 $WS_PWD/dock-scripts/env-al9.log
                      build_images "$al_os_version" "$al_rel_version" "x86_64" "$al_types" "$al_repo_prefix" "$al_date_suffix" "rootfs" "true"
                      cd ../..
                      docker run --rm -t \
                        -v $PWD:/code \
                        -v /var/run/docker.sock:/var/run/docker.sock:rw \
                        -e SYS_BASE=$SYS_BASE \
                        -e SYS_INIT=$SYS_INIT \
                        -e SYS_MICRO=$SYS_MICRO \
                        -e SYS_DEFAULT=$SYS_DEFAULT \
                        -e SYS_MINIMAL=$SYS_MINIMAL \
                        srbala/testinfra:docker pytest -p no:cacheprovider --verbose --junit-xml al9_junit.xml   
                      mv *.xml $WS_PWD/dock-scripts/work/                   
                      rm -rf "$WS_PWD/dock-scripts/work/test-al9"
                    '''
                    junit allowEmptyResults: true, skipPublishingChecks: true, testResults: '**/al9*.xml'
                    archiveArtifacts artifacts: "**/al9*.xml", fingerprint: true 
                  }
                }
                stage('AL9 Prepare') {
                  when {
                    expression { params.AL9OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Prepare Release ..."
                    withCredentials([usernamePassword(credentialsId: 'github-almalinuxautobot', passwordVariable: 'GIT_PWD', usernameVariable: 'GIT_UID')]) {
                      sh '''
                        cd $WS_PWD/dock-scripts 
                        source ./docker_utils_functions
                        validateOrPrepareBranches "9" "${AL9DATE}" "${AL9BRANCH}" "${AL9OPTION}" "false" "${NO_FAIL}" "${GIT_UID}" "${GIT_PWD}"
                      '''
                    }
                  }
                }
                stage('AL9 ChangeLog') {
                  when {
                    expression { params.AL9OPTION != 'No Changes' }
                  }
                  steps {
                    echo "Generate change log ..."
                    sh '''
                      cd $WS_PWD/dock-scripts
                      source $WS_PWD/dock-scripts/env-al9.log
                      ./gen_changelog 9 $SYS_DEFAULT almalinux:9
                      ls -al
                      cat changelog_al9.log
                      rm __*.log
                    '''
                  }
                }                                          
              }              
            }
          }          
        }
        stage('Generate Library') {
          when {
            anyOf {
              expression { params.AL8OPTION != 'No Changes' }
              expression { params.AL9OPTION != 'No Changes' }
            }  
          }
          steps {
            echo "Generating library file"
            sh '''
            cd $WS_PWD/dock-scripts 
            source ./docker_utils_functions
            ./gen_docker_official_library "${AL8DATE}" "${AL9DATE}"
            '''
          }
        }
        stage('Create PR') {
          environment {
            COMMIT_NOTES = "${params.COMMIT_NOTES}"
          }
          when {
            anyOf {
              expression { params.AL8OPTION != 'No Changes' }
              expression { params.AL9OPTION != 'No Changes' }
            }  
          }
          steps {
            echo "Working to create a PR request"
            sh '''
              cd $WS_PWD/dock-scripts/
              echo "${COMMIT_NOTES}" > prinfo.md
              echo "" >> prinfo.md
              cat changelog_al8.log >> prinfo.md
              echo "" >> prinfo.md
              cat changelog_al9.log >> prinfo.md
              echo "" >> prinfo.md
            '''
            sh '''
            cd $WS_PWD
            git clone --single-branch https://github.com/AlmaLinux/docker-library-official-images dh-off
            cd dh-off
            git checkout -b "alma-update-${JDT}"
            cp $WS_PWD/dock-scripts/__alma ./library/almalinux
            git add ./library/almalinux
            '''
            withCredentials([string(credentialsId: 'github-almalinuxautobot-name', variable: 'GIT_NAME'),string(credentialsId: 'github-almalinuxautobot-email', variable: 'GIT_EMAIL')]) {
              sh '''
              cd $WS_PWD/dh-off
              set +x
              git config user.name ${GIT_NAME}
              git config user.email ${GIT_EMAIL}
              git commit -m "Almalinux auto-update - ${JDT}"
              '''
            }
            withCredentials([usernamePassword(credentialsId: 'github-almalinuxautobot', passwordVariable: 'GIT_PWD', usernameVariable: 'GIT_UID')]) {
                sh '''
                  cd $WS_PWD
                  mkdir -p $WS_PWD/bin
                  PATH=$WS_PWD/bin:$PATH
                  curl -s -o $WS_PWD/cli.json https://api.github.com/repos/cli/cli/releases/latest
                  J1=$(cat $WS_PWD/cli.json | jq '.assets[] .browser_download_url' | grep linux_amd64.tar.gz | xargs)
                  curl -s -o $WS_PWD/cli.tar.gz -L $J1
                  tar -xf $WS_PWD/cli.tar.gz
                  mv $WS_PWD/gh_*/bin/gh $WS_PWD/bin/gh
                  chmod +x $PWD/bin/gh
                  rm -rf gh_* $WS_PWD/cli.*
                  jq --version && gh --version
                  ls -al                
                  cd $WS_PWD/dh-off
                  export GH_TOKEN=$GIT_PWD 
                  echo $GIT_PWD > gh auth login --with-token 
                  git branch
                  git push https://${GIT_UID}:${GIT_PWD}@github.com/AlmaLinux/docker-library-official-images.git "alma-update-${JDT}" && git fetch origin "alma-update-${JDT}"
                  gh pr create --fill --repo docker-library/official-images --head=AlmaLinux:"alma-update-${JDT}" --base master -F $WS_PWD/dock-scripts/prinfo.md
                '''
                //TODO: Prune images created/used in this job
            }
          }
        }
    }
  post {
    always {
      archiveArtifacts artifacts: "**/*.log", fingerprint: true
      script {
        // cleanup any images or contianers created
        sh '''
          docker system prune -f
        '''
      }
    }        
    success {
      echo "success"
      // slackSend channel: '#albs-jenkins-notifications',
      //   color: 'good',
      //   message: "@here The Docker/Container rootfs build job ${currentBuild.fullDisplayName} - ${env.JOB_NAME}, ID #${env.BUILD_NUMBER} completed successfully ${currentBuild.absoluteUrl}."
    }
    failure {
      echo "failure"
      // slackSend channel: '#albs-jenkins-action-required',
      //   message: "@channel The Docker/Container rootfs build job ${currentBuild.fullDisplayName} - ${env.JOB_NAME}, ID #${env.BUILD_NUMBER} has failed, possible security update found ${currentBuild.absoluteUrl}.",
      //   color: 'red'
    }
  }    
}
